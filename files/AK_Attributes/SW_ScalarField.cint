
int MAXSTRLEN = 512;

double refDensity = 200.0;



void get_scl_field_vis(
	char s[])
{
	get("", "Id", s);
	if(
		!strcmp(s, "PeakTorquePerWidth") ||
		!strcmp(s, "PeakForcePerWidth") ||
		!strcmp(s, "FrontArrivalTime") ||
		!strcmp(s, "FlowDepth") ||
		!strcmp(s, "EntrainmentMass") ){
		get("", "VisNone", s);
	}else{
		get("", "VisWrite", s);
	}
}


void init_peak_velocity_from_dynamic_pressure()
{
	char label[MAXSTRLEN];
	char aux[MAXSTRLEN];
	char s[64];
	int i; int ie;
	get("..", "Density", s);
	sscanf(s, "%lf", refDensity);
	get("", "Label", label);
	i = istrstr(label, "dynamic peak pressure [KPa]");
	if(i >= 0){
		ie = i + strlen("dynamic peak pressure [KPa]");
		strcpy(aux, label[ie]);
		strcpy(label[i], "peak velocity [m/s]");
		strcat(label, aux);
		set("", "SetLabel", label);
	}
}
double peak_velocity_from_dynamic_pressure(
	double v)
{
	return sqrt(v*1000.0 / refDensity);
}



void init_inverse()
{
	char label[MAXSTRLEN];
	char aux[MAXSTRLEN];
	int i; int ie;
	get("", "Label", label);
	i = istrstr(label, " [");
	if(i >= 0){
		strcpy(aux, label[i]);
		strcpy(label[i], " inverse");
		strcat(label, aux);
	}
	i = istrrchr(label, '[');
	if(i >= 0){
		ie = istrchr(label[i], ']');
		if(ie){
			ie += i;
			label[i] = 0;
			label[ie] = 0;
			sprintf(aux, "%s[1/(%s)", label, label[i+1]);
			label[ie] = ']';
			strcat(aux, label[ie]);
			strcpy(label, aux);
		}
	}
	set("", "SetLabel", label);
}
double inverse(
	double v)
{
	if(fabs(v) < 1.0e-30) return 0.0;
	return 1.0 / v;
}



void init_temperature_from_enthalpy()
{
	char label[MAXSTRLEN];
	char aux[MAXSTRLEN];
	char s[64];
	int i; int ie;
	get("", "Label", aux);
	i = istrstr(aux, "enthalpy");
	if(i >= 0){
		ie = istrrchr(aux, ']');
		aux[i] = 0;
		sprintf(label, "%s temperature [Grad C%s", aux, aux[ie]);
		set("", "SetLabel", label);
	}
}
double temperature_from_enthalpy(
	double v)
{
	return TemperatureFromEnthalpy(v);
}



void init_water_mass_fraction_from_enthalpy()
{
	char label[MAXSTRLEN];
	char aux[MAXSTRLEN];
	char s[64];
	int i; int ie;
	get("", "Label", aux);
	i = istrstr(aux, "enthalpy");
	if(i >= 0){
		ie = istrrchr(aux, ']');
		aux[i] = 0;
		sprintf(label, "%s water mass fraction [kg/kg%s", aux, aux[ie]);
		set("", "SetLabel", label);
	}
}
double water_mass_fraction_from_enthalpy(
	double v)
{
	return WaterMassFractionFromEnthalpy(v);
}



void init_bed_friction_angle_from_enthalpy()
{
	char label[MAXSTRLEN];
	char aux[MAXSTRLEN];
	char s[64];
	int i; int ie;
	get("", "Label", aux);
	i = istrstr(aux, "enthalpy");
	if(i >= 0){
		ie = istrrchr(aux, ']');
		aux[i] = 0;
		sprintf(label, "%s bed friction angle [Grad%s", aux, aux[ie]);
		set("", "SetLabel", label);
	}
}
double bed_friction_angle_from_enthalpy(
	double v)
{
	return (0.2 * exp(-v / 20000.0)) * 180 / pi;
}



void getDataConversion(
	char s[])
{
	get("", "$conversion", s);
	if(s[0] == 0 || !strcmp(s, "%AK_NULL%")) strcpy(s, "none");
}

void setDataConversion(
	char s[])
{
	char aux[MAXSTRLEN];
	get("", "$conversion", aux);
	if(!strcmp(aux, s)) return;
	if(aux[0] == 0 || !strcmp(aux, "none")){
		get("", "Label", aux);
		set("", "$unconvertedLabel", aux);
	}
	set("", "$conversion", s);
}

void getDataConversionOptions(
	char s[])
{
	char label[MAXSTRLEN];
	get("", "Label", label);
	strcpy(s, "none"); strcat(s, AK_SEP);
	if(istrstr(label, "dynamic peak pressure [KPa]") >= 0){
		strcat(s, "peak_velocity_from_dynamic_pressure"); strcat(s, AK_SEP);
	}else if(istrstr(label, "enthalpy") >= 0){
		strcat(s, "temperature_from_enthalpy"); strcat(s, AK_SEP);
		strcat(s, "water_mass_fraction_from_enthalpy"); strcat(s, AK_SEP);
		strcat(s, "bed_friction_angle_from_enthalpy"); strcat(s, AK_SEP);
	}
	strcat(s, "inverse"); strcat(s, AK_SEP);
}



void export_front_velocity_along_polyline_vis(
	char value[])
{
	char label[MAXSTRLEN];
	get("", "ExportValuesAlongPolylineVis", value);
	if(strcmp(value, "w")) return;
	get("", "Label", label);
	if(istrstr(label, "front arrival time [s]") >= 0)
		strcpy(value, "w");
	else
		strcpy(value, "-");
}



void export_and_show_values_along_polyline(
	char value[])
{
	FILE *fp;
	int n;
	int dim = 1;
	double x[2];
	double xprev[2];
	double s[1];
	double z[1];
	double v[1];
	char aux[MAXSTRLEN];
	char fname[MAXSTRLEN];
	char label[MAXSTRLEN];
	char profname[MAXSTRLEN];
	char ename[MAXSTRLEN];
    char daco[MAXSTRLEN];
    char filename[MAXSTRLEN];
	int i;
    int ssc;

    /* Changelog FSO: */
    /*  - profile export asks for directory now */
    /*  - write xyz and lz at the same time for profile exports */
    /*  - do not offer plotting of profiles anymore  */
    /*  - profile name is added to filename */

    /* # FSO--- get name of polyline, used in filename */
    get("", "SelectedPolyline",label);
    ssc = istrrchr(label, '/');
    strcpy(profname,label[ssc+1]);
    
    /* # FSO--- export an xyz file first */
    get("", "ShortExportFilename",ename);
    sprintf(fname,"%s/%s_%s_xyz.txt",value,ename,profname);
    set("", "ExportValuesAlongPolyline", fname);
	fp = fopen(fname, "r");
	if(!fp){
		sprintf(aux, "cannot open file '%s' for reading", fname);
		set_error(aux);
		return;
	}
	n = 0;
	while(fgets(aux, MAXSTRLEN, fp)){
		if(sscanf(aux, " %lf %lf %lf %lf ", x[0], x[1], z[n], v[n]) == 4){
			if(n == 0)
				s[n] = 0.0;
			else
				s[n] = s[n-1] + |x - xprev|;
			xprev = x;
			n++;
			if(n >= dim){
				dim *= 2;
				resize(s, dim);
				resize(z, dim);
				resize(v, dim);
			}
		}
	}
	fclose(fp);
   
    /* # FSO--- write the lz file */
    sprintf(fname,"%s/%s_%s_lz.txt",value,ename,profname);
	fp = fopen(fname, "w");
	if(!fp){
		sprintf(aux, "cannot open file '%s' for writing", fname);
		set_error(aux);
		return;
	}
	get("Colorbar", "Attribute", aux);
	fprintf(fp, "#length\tz\t%s\n", aux);
	get("Colorbar", "Unit", aux);
	fprintf(fp, "#m\tm\t%s\n", aux);
	for(i = 0; i < n; i++) fprintf(fp, "%g\t%g\t%g\n", s[i], z[i], v[i]);
	fclose(fp);
}



void export_front_velocity_along_polyline(
	char value[])
{
	FILE *fp;
	int n;
	int dim = 1;
	double x[1][3];
	double t[1];
	double ds;
	double s[1];
	double v[1];
	double dx[3];
	double vs[1];
	int i;
	int nsmooth;
	char aux[MAXSTRLEN];

	set("", "ExportValuesAlongPolyline", value);
	fp = fopen(value, "r");
	if(!fp){
		sprintf(aux, "cannot open file '%s' for reading", value);
		set_error(aux);
		return;
	}
	n = 0;
	while(fgets(aux, MAXSTRLEN, fp)){
		if(sscanf(aux, " %lf %lf %lf %lf ", x[n][0], x[n][1], x[n][2], t[n]) == 4){
			n++;
			if(n >= dim){
				dim *= 2;
				resize(x, dim);
				resize(t, dim);
			}
		}
	}
	fclose(fp);
	if(n < 3) return;
	resize(s, n);
	resize(v, n);
	s[0] = 0.0;
	v[0] = 0.0;
	for(i = 1; i < n; i++){
		ds = |x[i] - x[i-1]|;
		if(fabs(t[i]-t[i-1]) < 1.0e-3)
			v[i] = 0.0;
		else
			v[i] = ds / (t[i]-t[i-1]);
		dx = x[i]-x[i-1];
		dx[2] = 0.0;
		s[i] = s[i-1] + |dx|;
	}
	v[0] = v[1];
	resize(vs, n);
	nsmooth = 50;
	while(nsmooth--){
		for(i = 1; i < n-1; i++){
			vs[i] = 0.25*(v[i-1] + 2.0*v[i] + v[i+1]);
		}
		vs[0] = vs[1];
		vs[n-1] = vs[n-2];
		v = vs;
	}
	fp = fopen(value, "w");
	if(!fp){
		sprintf(aux, "cannot open file '%s' for writing", value);
		set_error(aux);
		return;
	}
	fprintf(fp, "#length\tz\tfront velocity\n");
	fprintf(fp, "#m\tm\tm/s\n");
	for(i = 0; i < n; i++){
		fprintf(fp, "%g\t%g\t%g\n", s[i], x[i][2], v[i]);
		//fprintf(fp, "%g\t%g\n", s[i], v[i]);
	}
	fclose(fp);
	set("/2dGraphViewer", "Import", value);
	set("/2dGraphViewer", "Active", "1");
	set("/Project", "Active", "0");
}




void export_and_show_time_series_at_point(
	char value[])
{
	FILE *fp;
	double t;
	char aux[0], pt[64], sim[8];
	int i;
	resize(aux, MAXSTRLEN);
	strcpy(sim, "..");
	get(sim, "CurrentTimeStep", aux);
	if(strcmp(aux, "%AK_NULL%") == 0) strcat(sim, "/..");
	get(sim, "CurrentTimeStep", aux);
	if(strcmp(aux, "%AK_NULL%") == 0) { resize(aux, 0); return; }
	if(set(sim, "LoadFirstTimeStep", "") != 0) { resize(aux, 0); return; }
	fp = fopen(value, "w");
	if(!fp){
		sprintf(aux, "cannot open file '%s' for writing", value);
		set_error(aux);
		resize(aux, 0);
		return;
	}
	get("", "ValueAtPoint", aux);
	i = istrstr(aux, "at");
	fprintf(fp, "#time\tvalue %s\n", aux[i]);
	strcpy(pt, aux[i + 3]);
	while(1){
		set("/", "Draw", "");
		get(sim, "CurrentTimeStep", aux);
		if(strcmp(aux, "%AK_NULL%") == 0) break;
		sscanf(aux, "at_%lf", t);
		set("", "ValueAtPoint", pt);
		get("", "ValueAtPoint", aux);
		i = istrstr(aux, "at"); aux[i] = 0;
		fprintf(fp, "%g\t%s\n", t, aux);
		get(sim, "NextTimeStepVis", aux);
		if(strcmp(aux, "w") != 0) break;
		set(sim, "LoadNextTimeStep", "");
	}
	fclose(fp);
	resize(aux, 0);
	set("/2dGraphViewer", "Import", value);
	set("/2dGraphViewer", "Active", "1");
	set("/Project", "Active", "0");
}
