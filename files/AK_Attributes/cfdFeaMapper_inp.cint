
// functions to write ABAQUS INP-files



// current base file name
char currFileName[0];
char currExtension[8];
// current ITC (iteration / time / crank angle)
double currITC = 0.0;

// element id's
int currIds[0];

// values for HTC and Tfluid
double currNoDataValue = -1.23e-30;
int nTFLUID = 0;
double TFLUID[0];
int nHTC = 0;
double HTC[0];
int nodeValues = 0;



int open_output(
	char fileName[])
{
	int iExt = istrrchr(fileName, '.');
	print "open_output:", fileName;
	resize(currFileName, strlen(fileName)+1);
	if(iExt >= 0){
		strncpy(currFileName, fileName, iExt);
		currFileName[iExt] = 0;
		strcpy(currExtension, fileName[iExt+1]);
	}else{
		strcpy(currFileName, fileName);
		strcpy(currExtension, "inp");
	}
	return 0;
}



void close_output()
{
	print "close_output";
	//resize(currFileName, 0);
	print "output closed.";
}



int open_datastep(
	int datastep,
	double t,
	double ITC,
	char domain[])
{
	print "open_datastep: datastep:", datastep, ", t:", t, ", ITC:", ITC, ", domain:", domain;
	currITC = ITC;
	return 0;
}



void close_datastep()
{
	char filename[0];
	int i;
	FILE *fp;
	print "close_datastep";
	if(nHTC && nHTC == nTFLUID){
		// write Tfluid/HTC-file:
		// assemble file name
		resize(filename, strlen(currFileName) + 64);
		sprintf(filename, "%s_%g_Tfluid_HTC.%s", currFileName, currITC, currExtension);
		fp = fopen(filename, "w");
		if(!fp){
			print "cannot write to file '%s'!", filename;
		}else{
			print "writing output file", filename, "...";
			if(nodeValues)
				fprintf(fp, "**Node No, FACE No, Tfluid[Celsius], HTC[W/mm^2K]\n");
			else
				fprintf(fp, "**Element No, FACE No, Tfluid[Celsius], HTC[W/mm^2K]\n");
			fprintf(fp, "*FILM,  OP=NEW\n");
			for(i = 0; i < nHTC; i++){
				if(HTC[i] != currNoDataValue){
					fprintf(fp, "%8d,%8s,%14.3f,%14.3g\n",
						currIds[i], "FPOS", TFLUID[i]+273.15, HTC[i]*1.0e-6);
				}
			}
			fclose(fp);
			print "writing output file", filename, "done";
		}
		resize(filename, 0);
		resize(TFLUID, 0); nTFLUID = 0;
		resize(HTC, 0); nHTC = 0;
	}
}



int write_values(
	char itf[],
	char attr[],
	int nDimsTopo,
	int atNodes,
	int ids[],
	int nDims,
	int nValues,
	double NO_DATA_VALUE,
	double v0[],
	double v1[],
	double v2[])
{
	int sel[3];
	int i;
	print "write_values: itf:", itf, ", attr:", attr, ", nDimsTopo:", nDimsTopo, ", atNodes:", atNodes,
		", nDims:", nDims, ", nValues:", nValues, ", NO_DATA_VALUE:", NO_DATA_VALUE;
	if(SelInit(itf, sel)){
		print "type of", itf, SelType(sel);
		print "size:", SelLen(sel);
	}
	if(strncmp(attr, "Tfluid", 6) == 0){
		resize(currIds, nValues);
		for(i = 0; i < nValues; i++) currIds[i] = ids[i];
		nTFLUID = nValues;
		resize(TFLUID, nTFLUID);
		for(i = 0; i < nValues; i++) TFLUID[i] = v0[i];
		nodeValues = atNodes;
	}else if(strncmp(attr, "HTC", 3) == 0){
		resize(currIds, nValues);
		for(i = 0; i < nValues; i++) currIds[i] = ids[i];
		nHTC = nValues;
		resize(HTC, nHTC);
		for(i = 0; i < nValues; i++) HTC[i] = v0[i];
		currNoDataValue = NO_DATA_VALUE;
		nodeValues = atNodes;
	}
	return 0;
}
	
